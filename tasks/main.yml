---
- name: Add the OS specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Rewrite apparmor
  template:
    src: "usr.sbin.mysqld.j2"
    dest: "/etc/apparmor.d/local/usr.sbin.mysqld"
  become: true

- name: Restart apparmor and enable
  service:
    name: apparmor
    state: restarted
    enabled: yes
  become: true
  tags:
    - deploy

- name: Install the mysql packages in Redhat derivatives
  yum: name={{ item }} state=installed
  with_items:
    - "{{ mysql_pkgs }}"
  when: ansible_os_family == 'RedHat'

- name: Install the mysql packages in Debian derivatives
  apt:
    name: "{{ item }}"
    state: installed
    update_cache: yes
  with_items:
    - "{{ mysql_pkgs }}"
  environment: "{{ env }}"
  when: ansible_os_family == 'Debian'
  become: true

- name: Data directory is empty?
  find:
    paths: "{{ mysql_datadir }}"
    file_type: directory
  register: mysql_running

- name: Stop MySQL service
  systemd:
    name: "{{ mysql_service }}"
    state: stopped
  become: true
  when: mysql_running.matched|int == 0

- name: Copy the my.cnf file
  template:
    src: "my.cnf.{{ ansible_os_family }}.j2"
    dest: "{{ mysql_conf_dir }}/my.cnf"
  become: true

- name: Create the directory /etc/mysql/conf.d
  file:
    path: /etc/mysql/conf.d
    state: directory
  become: true

- name: Deploy mysql config to conf.d
  template:
    src: mysql.cnf.j2
    dest: /etc/mysql/conf.d/mysql.cnf
  become: true

- name: rm .my.cnf file, if exists in ansibleremote home path
  file:
    path: "~/.my.cnf"
    state: absent
    force: yes

- name: Create data and file-priv directories
  file:
    path: "{{ item }}"
    state: directory
    owner: mysql
    group: mysql
    mode: 0755
  when: mysql_datadir != '/var/lib/mysql' and mysql_running.matched|int == 0
  with_items:
    - "{{ mysql_datadir }}"
    - "{{ mysql_securefilepriv }}"
  become: true

- name: Initializing de Data Directory Manually when datadir is non default path (mysql_install_db)
  shell: "mysqld --initialize --user=mysql --datadir={{ mysql_datadir }} --basedir={{ mysql_basedir }} --explicit_defaults_for_timestamp --secure-file-priv={{ mysql_securefilepriv}}"
  become: true
  when: mysql_running.matched|int == 0

- name: Start the mysql services
  systemd:
    name: "{{ mysql_service }}"
    state: started
    enabled: yes
  become: true

- name: Search random MySQL root password
  shell: echo $(grep "A temporary password is generated for root@localhost"  /var/log/mysql/error.log | awk 'END{print $11}')
  become: true
  when: mysql_running.matched|int == 0
  register: mysql_root_autogenerated_password

- name: Update mysql root password for all root accounts
  shell: "mysqladmin -u root --password='{{ mysql_root_autogenerated_password.stdout }}' password {{ mysql_root_db_pass }}"
  when: mysql_root_autogenerated_password.stdout|default("") != "" and mysql_running.matched|int == 0

- name: Ensure anonymous users are not in the database
  mysql_user:
    name: ''
    host: "{{ item }}"
    state: absent
    login_user: root
    login_password: "{{ mysql_root_db_pass }}"
  with_items:
   - localhost
   - "{{ ansible_hostname }}"
  when: mysql_repl_master is not defined

- name: Create the database's
  mysql_db:
    name: "{{ item.name }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_db_pass }}"
  with_items:
    - "{{ mysql_db }}"
  when: mysql_db|lower() != 'none' and mysql_repl_role == 'master'

- name: Create the database users
  mysql_user:
    name: "{{ item.name }}"
    password: "{{ item.pass|default('foobar') }}"
    priv: "{{ item.priv|default('*.*:ALL') }}"
    state: present
    host: "{{ item.host | default('localhost') }}"
    login_user: root
    login_password: "{{ mysql_root_db_pass }}"
  with_items:
    - "{{ mysql_users }}"
  when: mysql_users|lower() != 'none' and mysql_repl_role == 'master'

- name: Create the replication users
  mysql_user:
    name: "{{ item.name }}"
    host: "%"
    password: "{{ item.pass|default('foobar') }}"
    priv: "*.*:REPLICATION SLAVE"
    state: present
    login_user: root
    login_password: "{{ mysql_root_db_pass }}"
  with_items:
    - "{{ mysql_repl_user }}"
  when: mysql_repl_role == 'master'

- name: Check if slave is already configured for replication
  mysql_replication:
    mode: getslave
    login_user: root
    login_password: "{{ mysql_root_db_pass }}" 
  ignore_errors: true
  register: slave
  when: mysql_repl_role == 'slave'

- name: Ensure the hostname entry for master is available for the client.
  lineinfile:
    dest: /etc/hosts
    regexp: "{{ mysql_repl_master }}"
    line: "{{ hostvars[mysql_repl_master].ansible_default_ipv4.address + '   ' + mysql_repl_master }}"
    state: present
  when: slave.Is_Slave is defined and slave.Is_Slave == False and mysql_repl_role == 'slave' and mysql_repl_master is defined
  become: true

- name: Get the current master servers replication status
  mysql_replication:
    mode: getmaster
    login_user: root                    
    login_password: "{{ mysql_root_db_pass }}"
  delegate_to: "{{ mysql_repl_master }}"
  register: repl_stat
  when: slave.Is_Slave is defined and slave.Is_Slave == False and mysql_repl_role == 'slave' and mysql_repl_master is defined

- name: Change the master in slave to start the replication
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_repl_master }}"
    master_log_file: "{{ repl_stat.File }}"
    master_log_pos: "{{ repl_stat.Position }}"
    master_user: "{{ mysql_repl_user[0].name }}"
    master_password: "{{ mysql_repl_user[0].pass }}"
    login_user: root                    
    login_password: "{{ mysql_root_db_pass }}"
  when: slave.Is_Slave is defined and slave.Is_Slave == False and mysql_repl_role == 'slave' and mysql_repl_master is defined

...
